using CorsairLink.Devices.ICueLink;

namespace CorsairLink.Tests.ICueLink;

public class LinkHubDataReaderTests
{
    [Fact]
    public void GetDevices_ReturnsAllSubDevices__1()
    {
        // Arrange
        var data = TestUtils.ParseHexString("0000080021000b000001000000051a3031303032433843333230333537423732423030303044344334000001000000051a303130303238324638323033353832424642303030314441363200000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000051a3031303030333835343230333534324233453030303034344234000001000000051a3031303031333630333230333538393845393030303037433830000007000000051a3032333245413031303045353931354430334132454230303030000001000000051a

        // Act
        var devices = LinkHubDataReader.GetDevices(data);

        // Assert
        Assert.Equal(6, devices.Count);
        Assert.Equal(0x07, devices.OnChannel(10).Model);
        Assert.Equal(0x00, devices.OnChannel(10).Variant);
    }

    [Fact]
    public void GetDevices_ReturnsAllSubDevices__2()
    {
        // Arrange
        var data = TestUtils.ParseHexString("0000080021000c000001000000051a3031303033423432393230333536344144383030303232334234000001000000051a3031303033423432393230333536344144383030303143423042000001000000051a30313030323832463832303335383242464230303031414439310000000000000000000000000000000000000000000000000000000000000000000001000000051a3031303032383246383230333538324246423030303239393932000001000000051a3031303032383246383230333538324246423030303238343043000007050000051a3032353235303136303046364142363130333442383830303030000001000000051a3031303032383246383230333538324246423030303238383030000001000000051a3031303030334137323230333531383931443030303134433632000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Act
        var devices = LinkHubDataReader.GetDevices(data);

        // Assert
        Assert.Equal(8, devices.Count);
        Assert.Equal(0x07, devices.OnChannel(10).Model);
        Assert.Equal(0x05, devices.OnChannel(10).Variant);
    }

    [Fact]
    public void GetDevices_ReturnsAllSubDevices__3()
    {
        // Arrange
        var data = TestUtils.ParseHexString("00000800210008000001000000051a3031303032334337313230333535464532373030303134334339000001000000051a3031303032334337313230333535464532373030303039373035000001000000051a30313030323343373132303335354645323730303032333635320000000000000000000000000000000000000000000000000000000000000000000009000000051a

        // Act
        var devices = LinkHubDataReader.GetDevices(data);

        // Assert
        Assert.Equal(4, devices.Count);
        Assert.Equal(0x09, devices.OnChannel(8).Model);
        Assert.Equal(0x00, devices.OnChannel(8).Variant);
    }

    [Fact]
    public void GetDevices_ReturnsAllSubDevices__4()
    {
        // Arrange
        var data = TestUtils.ParseHexString("0000080021000d00000c000000051a303130303041303036313034363130463536303030303341364400000e00000005183433304341443539464632384145344133383530433932450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000000051a303130303337423930323033353939354430303030303138393800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Act
        var devices = LinkHubDataReader.GetDevices(data);

        // Assert
        Assert.Equal(3, devices.Count);
        Assert.Equal(0x0c, devices.OnChannel(1).Model);
        Assert.Equal(0x00, devices.OnChannel(1).Variant);
        Assert.Equal(0x0e, devices.OnChannel(2).Model);
        Assert.Equal(0x00, devices.OnChannel(2).Variant);
        Assert.Equal(0x09, devices.OnChannel(13).Model);
        Assert.Equal(0x00, devices.OnChannel(13).Variant);
    }

    [Fact]
    public void GetDevices_ReturnsAllSubDevices_WhenContinuationPacketAvailable__1()
    {
        // Arrange
        var data1 = TestUtils.ParseHexString("00000800210013000002000000051a3031303032373030323130333637433045433030303034364546000010000000051a3031303032343938323230333639313439413030303030354231000002000000051a3031303031383237313230333638423132423030303045413037000001000000051a3031303031314143313230333535443731373030303046333737000002000000051a3031303031383237313230333638423132423030303045413238000011020000051a3031303031334234303230333642314545463030303133333733000001000000051a3031303032343341363230333536313041413030303033313338000001000000051a30313030304346363432303335363137393130303031343430450000000000000000000000000000000000000000000000000000000000000000000002000000051a3031303031383237313230333638423132423030303045413131000002000000051a3031303031383237313230333638423132423030303045413333000002000000051a3031303031383237313230333638423132423030303136443339000002000000051a3031303031383237313230333638423132423030303136443342000002000000051a3031303031383237313230333638423132423030303136443346000002000000051a3031303031383237313230333638423132423030303137");
        var data2 = TestUtils.ParseHexString("00000800373131000002000000051a

        // Act
        var devices = LinkHubDataReader.GetDevices(data1, data2);
        var deviceUniqueChannelCount = devices.Select(x => x.Channel).Distinct().Count();

        // Assert
        Assert.Equal(15, devices.Count);
        Assert.Equal(devices.Count, deviceUniqueChannelCount);
        Assert.Equal(0x02, devices.OnChannel(1).Model);
        Assert.Equal(0x00, devices.OnChannel(1).Variant);
        Assert.Equal(0x02, devices.OnChannel(14).Model);
        Assert.Equal(0x00, devices.OnChannel(14).Variant);
        Assert.Equal(0x02, devices.OnChannel(15).Model);
        Assert.Equal(0x00, devices.OnChannel(15).Variant);
    }

    [Fact]
    public void GetDevices_ReturnsAllSubDevices_WhenContinuationPacketAvailable__2()
    {
        // Arrange
        var data1 = TestUtils.ParseHexString("00000800210017000004000000051A3031303032303037343230333638454341383030303046424545000013000000051A3031303032424237393230333539393943453030303030414433000003000000051A3031303033333738353230333639374432463030303042354239000004000000051A3031303032303037343230333638454341383030303046343644000004000000051A3031303032303037343230333638454341383030303041333144000013000000051A3031303032383030323130333634314632413030303032363439000013000000051A303130303237413435323033354230333738303030304546433700000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000051A3031303032303037343230333638454341383030303046383943000004000000051A3031303032303037343230333638454341383030303130363242000004000000051A3031303032303037343230333638454341383030303044393945000004000000051A3031303032303037343230333638454341383030303046384137000004000000051A3031303031323030323130333634323731363030303032313435000004000000051A3031303032303037343230333638454341383030303045453736000004000000051A3031303032303037343230333638");
        var data2 = TestUtils.ParseHexString

        // Act
        var devices = LinkHubDataReader.GetDevices(data1, data2);
        var deviceUniqueChannelCount = devices.Select(x => x.Channel).Distinct().Count();

        // Assert
        Assert.Equal(18, devices.Count);
        Assert.Equal(devices.Count, deviceUniqueChannelCount);
        Assert.Equal(0x04, devices.OnChannel(1).Model);
        Assert.Equal(0x00, devices.OnChannel(1).Variant);
        Assert.Equal(0x13, devices.OnChannel(6).Model);
        Assert.Equal(0x00, devices.OnChannel(6).Variant);
    }

    [Fact]
    public void GetDevices_ReturnsAllSubDevices_WhenContinuationPacketAvailableAndEmpty__3()
    {
        // Arrange
        var data1 = TestUtils.ParseHexString("00000800210017000004000000051A3031303032303037343230333638454341383030303046424545000013000000051A3031303032424237393230333539393943453030303030414433000003000000051A3031303033333738353230333639374432463030303042354239000004000000051A3031303032303037343230333638454341383030303046343644000004000000051A3031303032303037343230333638454341383030303041333144000013000000051A3031303032383030323130333634314632413030303032363439000013000000051A303130303237413435323033354230333738303030304546433700000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000051A3031303032303037343230333638454341383030303046383943000004000000051A3031303032303037343230333638454341383030303130363242000004000000051A3031303032303037343230333638454341383030303044393945000004000000051A3031303032303037343230333638454341383030303046384137000004000000051A3031303031323030323130333634323731363030303032313435000004000000051A303130303230303734323033363845434138303030304545373600000000000000000000000000000000000000000000");
        var data2 = TestUtils.ParseHexString

        // Act
        var devices = LinkHubDataReader.GetDevices(data1, data2);
        var deviceUniqueChannelCount = devices.Select(x => x.Channel).Distinct().Count();

        // Assert
        Assert.Equal(13, devices.Count);
        Assert.Equal(devices.Count, deviceUniqueChannelCount);
    }

    [Fact]
    public void GetFirmwareVersion_ReturnsHumanReadableVersionString()
    {
        // Arrange
        var data = TestUtils.ParseHexString("000002000209e801000d000000051a303130303233433731323033353546453237303030314437334400000d000000051a303130303332313035323033364145413136303030303030364600000d000000051a3031303032334337313230333535464532373030303039413031000005000000051a303130303036443734323033364141373139303030304645314500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000051a3031303030364437343230333641413731393030303046444539000005000000051a

        // Act
        var firmwareVersion = LinkHubDataReader.GetFirmwareVersion(data);

        // Assert
        Assert.Equal("2.9.488", firmwareVersion);
    }

    [Fact]
    public void GetSpeedSensors_ReturnsAllSpeedSensors()
    {
        // Arrange
        var data = TestUtils.ParseHexString("0000080025000F01000000E20100520300E401010000010000010000010000002203001502009A0A00210300CF0100B901010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Act
        var sensors = LinkHubDataReader.GetSpeedSensors(data);

        // Assert
        Assert.Equal(15, sensors.Count);
        Assert.Equal(0, sensors.ElementAt(0).Channel);
        Assert.Equal(LinkHubSpeedSensorStatus.Unavailable, sensors.ElementAt(0).Status);
        Assert.Equal(default, sensors.ElementAt(0).Rpm);
        Assert.Equal(1, sensors.ElementAt(1).Channel);
        Assert.Equal(LinkHubSpeedSensorStatus.Available, sensors.ElementAt(1).Status);
        Assert.Equal(482, sensors.ElementAt(1).Rpm);
    }

    [Fact]
    public void GetTemperatureSensors_ReturnsAllTemperatureSensors()
    {
        // Arrange
        var data = TestUtils.ParseHexString("0000080010000F01000000D00000CD0000C90001000001000001000001000000F600001F01003901001401003201001501010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Act
        var sensors = LinkHubDataReader.GetTemperatureSensors(data);

        // Assert
        Assert.Equal(15, sensors.Count);
        Assert.Equal(0, sensors.ElementAt(0).Channel);
        Assert.Equal(LinkHubTemperatureSensorStatus.Unavailable, sensors.ElementAt(0).Status);
        Assert.Equal(default, sensors.ElementAt(0).TempCelsius);
        Assert.Equal(1, sensors.ElementAt(1).Channel);
        Assert.Equal(LinkHubTemperatureSensorStatus.Available, sensors.ElementAt(1).Status);
        Assert.Equal(20.8f, sensors.ElementAt(1).TempCelsius!.Value, 0.1f);
    }
}
