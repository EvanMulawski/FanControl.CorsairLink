using System;
using System.Collections.Generic;

namespace CorsairLink.SiUsbXpress;

public static class EncodingHelper
{
    private static readonly byte[] ENCODE_DATA = new byte[16]
    {
       85,
       86,
       89,
       90,
       101,
       102,
       105,
       106,
       149,
       150,
       153,
       154,
       165,
       166,
       169,
       170
    };

    private static readonly byte[] DECODE_DATA = new byte[256]
    {
       48,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       16,
       32,
       33,
       0,
       18,
       34,
       35,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       20,
       36,
       37,
       0,
       22,
       38,
       39,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       24,
       40,
       41,
       0,
       26,
       42,
       43,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       28,
       44,
       45,
       0,
       30,
       46,
       47,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0
    };

    public static byte[] EncodeData(ReadOnlySpan<byte> data)
    {
        int length = 2 * data.Length + 2;
        byte[] encodedData = new byte[length];

        int num1 = 0;
        int num2 = 1;

        encodedData[0] = (byte)(ENCODE_DATA[num1 << 1 & 15] & 252U);
        encodedData[length - 1] = 0;

        for (int index = 0; index < data.Length; ++index)
        {
            byte num3 = data[index];
            encodedData[num2++] = ENCODE_DATA[num3 & 15];
            encodedData[num2++] = ENCODE_DATA[num3 >> 4];
        }

        return encodedData;
    }

    public static byte[] DecodeData(ReadOnlySpan<byte> data)
    {
        List<byte> byteList = new();
        int num = data.Length - 2;
        int index = 1;

        while (index < num)
        {
            int num1 = DECODE_DATA[data[index++]] & 15;
            int num2 = DECODE_DATA[data[index++]] & 15;
            byteList.Add((byte)(num1 | num2 << 4));
        }

        return byteList.ToArray();
    }

    public static bool HasError(ReadOnlySpan<byte> data) => data == null || data.Length < 2 || (DECODE_DATA[data[0]] & 15) >> 1 != 7;
}
